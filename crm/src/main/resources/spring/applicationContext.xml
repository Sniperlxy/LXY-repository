<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 开启注解扫描：扫描除了Controller以外的组件-->
    <context:component-scan base-package="com.lxy.crm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入数据库连接配置文件  -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <!-- 配置数据库连接池(这里使用的是alibaba druid的连接池) -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
              <property name="username" value="${jdbc.username}"/>
              <property name="password" value="${jdbc.password}"/>
              <property name="url" value="${jdbc.url}"/>
              <property name="driverClassName" value="${jdbc.driverClassName}"/>
    </bean>

    <!-- sessionFactory：和transactionManager什么关系？ -->
    <!--得到sessionFactory-->
   <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <!--得到数据源-->
       <property name="dataSource" ref="dataSource"/>
       <!--得到mybatis的配置文件-->
       <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
       <!--得到mybatis的映射文件-->
       <property name="mapperLocations" value="classpath:mybatis/mapper/*Mapper.xml"/>
   </bean>

    <!--配置事务控制:事务管理器，让它控住数据源里面连接的关闭和提交-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控住数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--引入logUtil工具类进行切面切入-->
    <bean id="logUtil" class="com.lxy.crm.util.LogUtil"/>

    <!--配置事务增强，事务属性，事务建议-->
    <tx:advice id="advice">
        <tx:attributes>
            <!--事务传播行为统一设置为SUPPORTS，如果当前有事务运行，当前方法就在这个事务内运行
            当前没有事务运行，就不可以运行在事务中-->
            <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="select*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="query*"  read-only="true" propagation="SUPPORTS"/>
            <tx:method name="list*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--基于XML配置AOP：哪些方法切入事务还要写切入点表达式，这个就是把AOP的工具类当做advisor加入到当前责任链中-->
    <aop:config>
        <aop:pointcut id="crudPointCut" expression="execution(* com.lxy.crm.service.*Service.*(..))"/>
        <aop:advisor advice-ref="advice" pointcut-ref="crudPointCut"/>
        <aop:aspect ref="logUtil">
            <aop:after method="writeLog" pointcut-ref="crudPointCut"/>
        </aop:aspect>
    </aop:config>

    <!-- mapper接口的扫描器：这里指定了某个包下的java文件都是mapper。如果是注解方式，它是全路径扫描，但是只认@Mapper-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lxy.crm.mapper"/>
    </bean>
</beans>